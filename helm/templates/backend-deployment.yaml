apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kure.fullname" . }}-backend
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "kure.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
spec:
  replicas: {{ .Values.backend.replicaCount }}
  selector:
    matchLabels:
      {{- include "kure.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        {{- include "kure.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: backend
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: backend
        image: "{{ .Values.global.imageRegistry }}{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
        imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.backend.service.targetPort }}
          protocol: TCP
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        # Database configuration - PostgreSQL only
        - name: DATABASE_URL
          value: "postgresql://{{ .Values.postgresql.username }}:{{ .Values.postgresql.password }}@{{ if .Values.postgresql.external }}{{ .Values.postgresql.host }}{{ else }}{{ include "kure.fullname" . }}-postgresql{{ end }}:{{ .Values.postgresql.port }}/{{ .Values.postgresql.database }}"
        # LLM configuration - All three values required together
        {{- if and .Values.backend.env.KURE_LLM_PROVIDER .Values.backend.env.KURE_LLM_API_KEY .Values.backend.env.KURE_LLM_MODEL }}
        - name: KURE_LLM_PROVIDER
          value: {{ .Values.backend.env.KURE_LLM_PROVIDER | quote }}
        - name: KURE_LLM_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "kure.fullname" . }}-backend-secrets
              key: llm-api-key
        - name: KURE_LLM_MODEL
          value: {{ .Values.backend.env.KURE_LLM_MODEL | quote }}
        {{- else if or .Values.backend.env.KURE_LLM_PROVIDER .Values.backend.env.KURE_LLM_API_KEY .Values.backend.env.KURE_LLM_MODEL }}
        {{- fail "LLM configuration incomplete: KURE_LLM_PROVIDER, KURE_LLM_API_KEY, and KURE_LLM_MODEL must all be provided together or all be empty (to disable LLM)" }}
        {{- end }}
        volumeMounts: []
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        resources:
          {{- toYaml .Values.backend.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.backend.service.targetPort }}
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: {{ .Values.backend.service.targetPort }}
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes: []
      {{- with .Values.backend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backend.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}