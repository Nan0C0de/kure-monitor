name: Docker Security Scan

on:
  workflow_dispatch:
    inputs:
      scan_target:
        description: 'Which images to scan'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - backend
        - frontend
        - agent
        - postgres
      severity_threshold:
        description: 'Minimum severity level to report'
        required: true
        default: 'MEDIUM'
        type: choice
        options:
        - LOW
        - MEDIUM
        - HIGH
        - CRITICAL
      backend_image_tag:
        description: "Tag of backend image."
        required: false
        type: string
        default: 1.0.0
      agent_image_tag:
        description: "Tag of agent image."
        required: false
        type: string
        default: 1.0.0
      frontend_image_tag:
        description: "Tag of frontend image."
        required: false
        type: string
        default: 1.0.0
      postgres_image_tag:
        description: "Tag of postgres image."
        required: false
        type: string
        default: 15-alpine

permissions:
  contents: read
  security-events: write

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix based on scan target
        id: set-matrix
        run: |
          case "${{ github.event.inputs.scan_target }}" in
            "all")
              echo 'matrix={"include":[{"name":"backend","image":"ghcr.io/nan0c0de/kure-monitor/backend","version":"${{ github.event.inputs.backend_image_tag }}","registry":"ghcr.io"},{"name":"frontend","image":"ghcr.io/nan0c0de/kure-monitor/frontend","version":"${{ github.event.inputs.frontend_image_tag }}","registry":"ghcr.io"},{"name":"agent","image":"ghcr.io/nan0c0de/kure-monitor/agent","version":"${{ github.event.inputs.agent_image_tag }}","registry":"ghcr.io"},{"name":"postgres","image":"postgres","version":"${{ github.event.inputs.postgres_image_tag }}","registry":"docker.io"}]}' >> $GITHUB_OUTPUT
              ;;
            "backend")
              echo 'matrix={"include":[{"name":"backend","image":"ghcr.io/nan0c0de/kure-monitor/backend","version":"${{ github.event.inputs.backend_image_tag }}","registry":"ghcr.io"}]}' >> $GITHUB_OUTPUT
              ;;
            "frontend")
              echo 'matrix={"include":[{"name":"frontend","image":"ghcr.io/nan0c0de/kure-monitor/frontend","version":"${{ github.event.inputs.frontend_image_tag }}","registry":"ghcr.io"}]}' >> $GITHUB_OUTPUT
              ;;
            "agent")
              echo 'matrix={"include":[{"name":"agent","image":"ghcr.io/nan0c0de/kure-monitor/agent","version":"${{ github.event.inputs.agent_image_tag }}","registry":"ghcr.io"}]}' >> $GITHUB_OUTPUT
              ;;
            "postgres")
              echo 'matrix={"include":[{"name":"postgres","image":"postgres","version":"${{ github.event.inputs.postgres_image_tag }}","registry":"docker.io"}]}' >> $GITHUB_OUTPUT
              ;;
          esac

  security-scan:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    name: Docker Image Security Scan
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Log in to GitHub Container Registry
      if: matrix.registry == 'ghcr.io'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Pull Docker image
      run: |
        docker pull ${{ matrix.image }}:${{ matrix.version }}
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ matrix.image }}:${{ matrix.version }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.name }}.sarif'
        severity: ${{ github.event.inputs.severity_threshold }},HIGH,CRITICAL
        exit-code: '0'  # Don't fail the build on vulnerabilities
    
    - name: Run Trivy vulnerability scanner (table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ matrix.image }}:${{ matrix.version }}
        format: 'table'
        severity: ${{ github.event.inputs.severity_threshold }},HIGH,CRITICAL
        exit-code: '0'
    
    - name: Run Trivy vulnerability scanner (detailed table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ matrix.image }}:${{ matrix.version }}
        format: 'table'
        output: 'trivy-results-${{ matrix.name }}.txt'
        severity: ${{ github.event.inputs.severity_threshold }},HIGH,CRITICAL
        exit-code: '0'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-${{ matrix.name }}.sarif'
        category: 'docker-${{ matrix.name }}'
    
    - name: Upload scan results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: trivy-scan-results-${{ matrix.name }}
        path: |
          trivy-results-${{ matrix.name }}.sarif
          trivy-results-${{ matrix.name }}.txt
        retention-days: 30
    
    - name: Run Hadolint Dockerfile linter
      if: matrix.name != 'postgres'
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ${{ matrix.name }}/Dockerfile
        format: sarif
        output-file: hadolint-results-${{ matrix.name }}.sarif
        no-fail: true
    
    - name: Upload Hadolint scan results to GitHub Security tab  
      if: matrix.name != 'postgres'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: hadolint-results-${{ matrix.name }}.sarif
        category: 'hadolint-${{ matrix.name }}'
    
    - name: Upload Hadolint results as artifact
      if: matrix.name != 'postgres'
      uses: actions/upload-artifact@v4
      with:
        name: hadolint-scan-results-${{ matrix.name }}
        path: hadolint-results-${{ matrix.name }}.sarif
        retention-days: 30
