name: Docker Security Scan

on:
  workflow_dispatch:
    inputs:
      scan_target:
        description: 'Which images to scan'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - backend
        - frontend
        - agent
      severity_threshold:
        description: 'Minimum severity level to report'
        required: true
        default: 'MEDIUM'
        type: choice
        options:
        - LOW
        - MEDIUM
        - HIGH
        - CRITICAL

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Docker Image Security Scan
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: backend
            image: ghcr.io/nan0c0de/kure/backend
            version: 0.0.16
          - name: frontend
            image: ghcr.io/nan0c0de/kure/frontend
            version: 0.0.13
          - name: agent
            image: ghcr.io/nan0c0de/kure/agent
            version: 0.0.14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check if image should be scanned
      id: should_scan
      run: |
        if [ "${{ github.event.inputs.scan_target }}" = "all" ] || [ "${{ github.event.inputs.scan_target }}" = "${{ matrix.name }}" ]; then
          echo "scan=true" >> $GITHUB_OUTPUT
        else
          echo "scan=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Log in to GitHub Container Registry
      if: steps.should_scan.outputs.scan == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Pull Docker image
      if: steps.should_scan.outputs.scan == 'true'
      run: |
        docker pull ${{ matrix.image }}:${{ matrix.version }}
    
    - name: Run Trivy vulnerability scanner
      if: steps.should_scan.outputs.scan == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ matrix.image }}:${{ matrix.version }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.name }}.sarif'
        severity: ${{ github.event.inputs.severity_threshold }},HIGH,CRITICAL
        exit-code: '0'  # Don't fail the build on vulnerabilities
    
    - name: Run Trivy vulnerability scanner (table format)
      if: steps.should_scan.outputs.scan == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ matrix.image }}:${{ matrix.version }}
        format: 'table'
        severity: ${{ github.event.inputs.severity_threshold }},HIGH,CRITICAL
        exit-code: '0'
    
    - name: Upload Trivy scan results to GitHub Security tab
      if: steps.should_scan.outputs.scan == 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-${{ matrix.name }}.sarif'
        category: 'docker-${{ matrix.name }}'
    
    - name: Upload scan results as artifact
      if: steps.should_scan.outputs.scan == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: trivy-scan-results-${{ matrix.name }}
        path: trivy-results-${{ matrix.name }}.sarif
        retention-days: 30
    
    - name: Run Hadolint Dockerfile linter
      if: steps.should_scan.outputs.scan == 'true'
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ${{ matrix.name }}/Dockerfile
        format: sarif
        output-file: hadolint-results-${{ matrix.name }}.sarif
        no-fail: true
    
    - name: Upload Hadolint scan results to GitHub Security tab  
      if: steps.should_scan.outputs.scan == 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: hadolint-results-${{ matrix.name }}.sarif
        category: 'hadolint-${{ matrix.name }}'
    
    - name: Upload Hadolint results as artifact
      if: steps.should_scan.outputs.scan == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: hadolint-scan-results-${{ matrix.name }}
        path: hadolint-results-${{ matrix.name }}.sarif
        retention-days: 30

  summary:
    needs: security-scan
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v5
      
    - name: Generate security scan summary
      run: |
        echo "# Docker Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Configuration:**" >> $GITHUB_STEP_SUMMARY
        echo "- Target: ${{ github.event.inputs.scan_target }}" >> $GITHUB_STEP_SUMMARY
        echo "- Severity Threshold: ${{ github.event.inputs.severity_threshold }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "**Scanned Images:**" >> $GITHUB_STEP_SUMMARY
        
        for component in backend frontend agent; do
          if [ "${{ github.event.inputs.scan_target }}" = "all" ] || [ "${{ github.event.inputs.scan_target }}" = "$component" ]; then
            echo "- ✅ $component" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏭️ $component (skipped)" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Results:**" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 Scan results uploaded to Security tab" >> $GITHUB_STEP_SUMMARY
        echo "- 📁 Detailed reports available in job artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 Review the Security tab for vulnerability details" >> $GITHUB_STEP_SUMMARY